#!/bin/bash
clear
echo This creates a Docker image, which we’re going to tag using -t so it has a friendly name.
docker build -t friendlyhello .
echo Where is your built image? It’s in your machine’s local Docker image registry:
docker images
# echo #Run the app, mapping your machine’s port 4000 to the container’s published port 80
# docker run -p 4000:80 friendlyhello
echo Now let’s run the app in the background, in detached mode:
docker run -d -p 4000:80 friendlyhello
docker container ls
# Now use docker container stop to end the process, using the CONTAINER ID, like so:
# docker container stop c4d510e834ef

#Share your image
# docker login
docker tag friendlyhello oselit/get-started:part2

docker images
# Publish the image
docker push oselit/get-started:part2
# Pull and run the image from the remote repository
# docker run -p 4000:80 oselit/get-started:part2
docker run -p 4000:80 oselit/get-started:latest

docker ps

#
# docker build -t friendlyname .  # Create image using this directory's Dockerfile
# docker run -p 4000:80 friendlyname  # Run "friendlyname" mapping port 4000 to 80
# docker run -d -p 4000:80 friendlyname         # Same thing, but in detached mode
# docker container ls                                # List all running containers
# docker container ls -a             # List all containers, even those not running
# docker container stop <hash>           # Gracefully stop the specified container
# docker container kill <hash>         # Force shutdown of the specified container
# docker container rm <hash>        # Remove specified container from this machine
# docker container rm $(docker container ls -a -q)         # Remove all containers
# docker image ls -a                             # List all images on this machine
# docker image rm <image id>            # Remove specified image from this machine
# docker image rm $(docker image ls -a -q)   # Remove all images from this machine
# docker login             # Log in this CLI session using your Docker credentials
# docker tag <image> username/repository:tag  # Tag <image> for upload to registry
# docker push username/repository:tag            # Upload tagged image to registry
# docker run username/repository:tag                   # Run image from a registry


#service
# prerequire
# https://github.com/docker/compose/releases
# we scale our application and enable load-balancing. To do this, we must go one level up in the hierarchy of a distributed application: the service.
